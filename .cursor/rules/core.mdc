---
description: 
globs: 
alwaysApply: true
---
---
description: 
globs: 
alwaysApply: true
---
# 🎯 開発哲学・基本原則

## 技術スタック
- Frontend: Vite + React 18 + TypeScript
- Styling: Tailwind CSS
- Backend: Supabase (Database + Auth + Storage + Edge Functions)
- Deployment: Vercel
- Icons: **カスタムSVG**
- Fonts: Google Fonts (Inter, Playfair Display)
- Package Manager: npm (安定性重視)

## 🚫 絶対使用禁止ライブラリ・パッケージ

### アイコンライブラリ（完全禁止）
- **Lucide React**: `lucide-react` - 絶対使用禁止
- **Heroicons**: `@heroicons/react` - インポートエラーが発生
- **React Icons**: `react-icons` - 避けるべき
- **Feather Icons**: `feather-icons` - 使用不可
- **Font Awesome React**: `@fortawesome/react-fontawesome` - 重い

### 推奨代替案
- **カスタムSVG**: インラインSVGを直接記述（最優先）
- **CSS**: CSSでのアイコン作成
- **SVGスプライト**: 軽量なSVGスプライトシステム

## 開発哲学・コーディング原則
- **保守性第一**: 5年後も安心してメンテナンスできるコード
- **拡張性重視**: 機能追加が容易な設計
- **セキュリティファースト**: セキュリティホールゼロを目指す
- **高級感とプレミアム体験**: チープな素材は一切使用禁止
- **パフォーマンス最優先**: ユーザー体験を損なわない速度
- **エラー対策優先**: 開発時のエラーを即座に解決

## 絶対遵守ルール（MUST）
1. **日本語での回答・コメント必須**: 全てのコメント、エラーメッセージ、ドキュメントは日本語で記述
2. **コード分割の徹底**: ファイルは最小限の長さに抑制（200行以内推奨）
3. **実装前の完全理解**: コードを書く前に必ず全体のアーキテクチャと既存コードを理解する
4. **禁止ライブラリチェック**: 上記の禁止ライブラリが含まれていないか必ず確認
5. **余白重視の高級感**: 臨場感のある豊富な余白とプレミアム体験の実現
6. **魅力的なボタンデザイン**: 思わず押したくなる高級感のあるボタン設計
7. **カードデザイン禁止**: HPではカードタイプを避け、より自然で流れるようなレイアウト採用

## 🔧 開発環境エラー対策

### Viteエラー対策
```bash
# 1. キャッシュクリア
rm -rf node_modules/.vite
rm -rf dist

# 2. 依存関係の完全再インストール
rm -rf node_modules
rm package-lock.json
npm install

# 3. 開発サーバー再起動
npm run dev

# 4. ブラウザキャッシュクリア
# Chrome: Ctrl+Shift+R (強制リロード)
# Firefox: Ctrl+F5
```

### WebSocketエラー（__WS_TOKEN__）対策
```javascript
// vite.config.ts - WebSocket設定追加
export default defineConfig({
  server: {
    hmr: {
      port: 24678, // 固定ポート使用
      overlay: true
    },
    host: true,
    strictPort: false
  },
  define: {
    __WS_TOKEN__: JSON.stringify('dev-token')
  }
});
```

### 必須トラブルシューティング手順
1. **エラー発生時**: まず依存関係の再インストール
2. **ポート競合**: 異なるポートを明示的に指定
3. **キャッシュ問題**: 開発サーバーとブラウザの両方をクリア
4. **インポートエラー**: 禁止ライブラリの使用確認
5. **型エラー**: TypeScript設定の確認

## 🔄 システム開発要望時の必須ワークフロー

### システム要望判定・必須手順
```
ユーザー要望受領
↓
システム機能要望かどうかの判定
├── システム機能要望の場合 → 【必須】以下の順序で実行
│   ├── 1. データベース設計（テーブル構造・RLS設計）
│   ├── 2. Supabase MCP実装（テーブル作成・RLS設定）
│   ├── 3. TypeScript型生成
│   └── 4. フロントエンド実装
├── UI/UXのみの場合 → 直接フロントエンド実装
└── 既存機能修正 → 影響範囲分析後、適切なフェーズから開始
```

### 必須実行項目（システム要望時）

#### 1. データベース設計フェーズ（最優先）
- **テーブル構造設計**: エンティティ分析、中間テーブル設計、必須フィールド追加
- **RLSポリシー設計**: ユーザー権限、データアクセス制御、セキュリティ要件
- **インデックス・制約設計**: パフォーマンス最適化、データ整合性確保

#### 2. Supabase MCP実装フェーズ（必須）
- **`mcp_supabase_apply_migration`**: テーブル作成・RLS設定のマイグレーション実行
- **`mcp_supabase_execute_sql`**: 動作確認・テストクエリ実行
- **`mcp_supabase_generate_typescript_types`**: TypeScript型定義生成
- **`mcp_supabase_get_advisors`**: セキュリティ・パフォーマンス確認

#### 3. 必須確認項目
- [ ] テーブル作成が成功したか
- [ ] RLSポリシーが正しく動作するか
- [ ] セキュリティアドバイザーでエラーがないか
- [ ] TypeScript型定義が生成されたか
- [ ] テストクエリが正常実行されるか

## コーディング品質基準
- TypeScript strict mode必須
- ESLint + Prettierによる自動フォーマット
- テストカバレッジ80%以上
- パフォーマンス監視の実装
- セキュリティ監査の定期実行

## 命名規則
- **ファイル名**: PascalCase（コンポーネント）、kebab-case（その他）
- **変数・関数**: camelCase
- **定数**: UPPER_SNAKE_CASE
- **型・インターフェース**: PascalCase（InterfaceはI接頭辞）
- **コンポーネント**: PascalCase
- **CSS クラス**: Tailwind CSS準拠
## 🚨 緊急時対応手順

### 開発サーバーが起動しない場合
1. `rm -rf node_modules .vite dist`
2. `npm install`
3. `npm run dev`

### 白い画面が表示される場合
1. ブラウザの開発者ツールでエラーを確認
2. 禁止ライブラリのインポートがないか確認
3. コンソールエラーを全て解決

### ビルドエラーが発生する場合
1. TypeScript型エラーを確認
2. 未使用のインポートを削除
3. `npm run build` で詳細エラーを確認